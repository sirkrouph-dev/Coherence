name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sunday at midnight

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quality Gate 1: Code Quality
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-quality-${{ hashFiles('**/pyproject.toml', '.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-quality-
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff black flake8 isort mypy bandit safety vulture
    
    - name: Ruff - Fast Python linter
      run: |
        ruff check . --output-format=github
      continue-on-error: true
    
    - name: Black - Code formatting
      run: |
        black --check --diff . || true
    
    - name: Flake8 - Style guide enforcement
      run: |
        flake8 . --count --statistics --show-source || true
    
    - name: isort - Import sorting
      run: |
        isort --check-only --diff . || true
    
    - name: mypy - Type checking
      run: |
        mypy core api --ignore-missing-imports
      continue-on-error: true
    
    - name: Bandit - Security linting
      run: |
        bandit -r core api -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Safety - Check for known security vulnerabilities
      run: |
        pip install safety
        safety check --json
      continue-on-error: true
    
    - name: Code complexity check
      run: |
        pip install radon
        radon cc core api -s -nb --total-average
      continue-on-error: true

  # Quality Gate 2: Tests
  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: quality-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -e ".[dev]"
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=core --cov=api --cov-report=xml --cov-report=term-missing --junitxml=junit.xml
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit.xml
          coverage.xml
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
        fail_ci_if_error: false

  # Quality Gate 3: Documentation
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
    
    - name: Check docstring coverage
      run: |
        pip install interrogate
        interrogate -v core api --fail-under=80
      continue-on-error: true
    
    - name: Build documentation
      run: |
        cd docs
        make clean
        make html
      continue-on-error: true
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  # Quality Gate 4: Performance Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark
    
    - name: Run benchmarks
      run: |
        cd benchmarks
        python run_benchmarks.py --output-format json --output-file benchmark_results.json
      continue-on-error: true
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmarks/benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: false
      continue-on-error: true

  # Quality Gate 5: Dependency Check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
    
    - name: Check for vulnerable dependencies
      run: |
        pip-audit --desc
      continue-on-error: true
    
    - name: Check for outdated dependencies
      run: |
        pip list --outdated
      continue-on-error: true

  # Quality Gate Summary
  quality-gates-summary:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [quality-check, test-matrix, docs-check]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Generate quality report
      run: |
        echo "# 📊 Quality Gates Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## ✅ Quality Checks" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation: ${{ needs.docs-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📈 Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- Test Coverage: Check Codecov for detailed report" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: All linting checks passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.quality-check.result }}" == "success" ] && \
           [ "${{ needs.test-matrix.result }}" == "success" ]; then
          echo "## ✅ All Quality Gates Passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Some Quality Gates Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed checks above." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Set pipeline status
      if: needs.quality-check.result != 'success' || needs.test-matrix.result != 'success'
      run: exit 1
